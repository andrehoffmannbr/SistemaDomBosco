import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': 'https://sistema-dom-bosco-ten.vercel.app',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Max-Age': '86400',
};

Deno.serve(async (req) => {
  // CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!;
    const SERVICE_ROLE = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const admin = createClient(SUPABASE_URL, SERVICE_ROLE);

    const payload = await req.json();
    const { email, password, name, role, tab_access } = payload ?? {};

    if (!email || !password || !name) {
      return new Response(JSON.stringify({ ok: false, error: 'missing_fields' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      });
    }

    // 1) cria usuário de Auth
    const { data: created, error: e1 } = await admin.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
    });
    if (e1) throw e1;

    const userId = created.user.id;

    // 2) insere profile (role = label representativo, tab_access = JSON por aba)
    const { error: e2 } = await admin.from('profiles').insert({
      id: userId,
      name,
      role: role ?? null,
      tab_access: tab_access ?? {},
    });
    if (e2) throw e2;

    return new Response(JSON.stringify({ ok: true, user_id: userId }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });
  } catch (err) {
    console.error('create-user error:', err);
    return new Response(JSON.stringify({ ok: false, error: String(err) }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
});

  // Verificar método HTTP para rota principal
  if (req.method !== "POST") {
    return new Response(JSON.stringify({ error: "Method not allowed" }), {
      status: 405,
      headers: { ...corsHeaders, "Content-Type": "application/json" }
    });
  }

  try {
    // 1) Forward do Authorization para o client do Supabase
    const authHeader = req.headers.get("Authorization") || "";

    // Para validar JWT, usar service role key ao invés de anon key
    const supabase = createClient(EDGE_SUPABASE_URL, EDGE_SERVICE_ROLE_KEY, {
      global: { headers: { Authorization: authHeader } }
    });

    // 2) Diagnóstico seguro (sem dados sensíveis)
    const jwtIsPresent = authHeader.startsWith("Bearer ");
    const nowMs = Date.now();

    // 3) Descobrir usuário autenticado
    const { data: userData, error: userErr } = await supabase.auth.getUser();
    if (userErr || !userData?.user) {
      return new Response(JSON.stringify({
        code: 401,
        message: "Invalid or missing JWT",
        diag: { jwtIsPresent, nowMs }
      }), { status: 401, headers: { "content-type": "application/json", "access-control-allow-origin": "*" }});
    }

    // 4) RBAC pelo profiles
    const userId = userData.user.id;
    const { data: profile, error: pErr } = await supabase
      .from("profiles")
      .select("id, role")
      .eq("id", userId)
      .single();
    if (pErr || !profile) {
      return new Response(JSON.stringify({
        code: 403,
        message: "Profile not found",
        diag: { userId }
      }), { status: 403, headers: { "content-type": "application/json", "access-control-allow-origin": "*" }});
    }

    const allowed = new Set(["admin", "administrator", "director"]);
    const hasAdminAccess = allowed.has((profile.role || "").toLowerCase());
    if (!hasAdminAccess) {
      return new Response(JSON.stringify({
        code: 403,
        message: "Insufficient role",
        diag: { role: profile.role }
      }), { status: 403, headers: { "content-type": "application/json", "access-control-allow-origin": "*" }});
    }

    // Extrair dados do request
    const { email, password, name, role, tab_access } = await req.json();
    if (!email || !password || !name || !role) {
      return new Response(JSON.stringify({ success: false, error: 'Invalid payload' }), {
        status: 400, 
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    }

    // Validações de entrada
    if (password.length < 6) {
      throw new Error('Password deve ter pelo menos 6 caracteres');
    }

    // :one: Criar usuário no Auth
    const { data: user, error: authError } = await supaAdmin.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
    });
    if (authError) {
      return new Response(JSON.stringify({ success: false, error: authError.message }), {
        status: 400, 
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    }

    // :two: Criar perfil no DB
    const { error: profileError } = await supaAdmin
      .from("profiles")
      .insert({
        id: user.user.id,
        name,
        role,
        email,
        tab_access: tab_access ?? {}
      });
    if (profileError) {
      // rollback opcional (desativar usuário recém-criado)
      try {
        await supaAdmin.auth.admin.updateUserById(user.user.id, { banned_until: "2999-01-01T00:00:00Z" });
      } catch (_) {}
      return new Response(JSON.stringify({ success: false, error: profileError.message }), {
        status: 400, 
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      });
    }

    return new Response(JSON.stringify({ success: true, user }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" }
    });

  } catch (err) {
    console.error('Error in create-user function:', err);
    
    return new Response(JSON.stringify({ 
      success: false, 
      error: err.message || 'Erro interno do servidor'
    }), {
      status: 400,
      headers: { ...corsHeaders, "Content-Type": "application/json" }
    });
  }
});
